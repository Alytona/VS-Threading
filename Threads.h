#pragma once

	using namespace System;
	using namespace System::Threading;

// Класс буфера передатчика, кольцевой буфер
// Поток генератора помещает данные в конец буфера, 
// а поток передатчика читает данные из начала буфера.
public ref class TTransmittingBuffer {

			// Мьютекс, обеспечивающий безопасность многопоточного доступа к буферу
			Mutex ^rMutex; 

			// Указатель на массив значений типа double, созданный динамически
			double *pBuffer;

			// Размер массива, начальная позиция, финальная позиция
			int iSize, iBeginPos, iEndPos;

		public:
			// Конструктору передается размер буфера
			TTransmittingBuffer( int size );
			~TTransmittingBuffer();

			// Метод, который делает буфер пустым
			void init();

			// Метод возвращает процент заполненности выделенного буфера
			float fillingInPercent();

			// Возвращает текущее значение в начальной позиции, 
			// передвигает указатель начальной позиции на следующую ячейку массива
			double peekOneValue();

			// Пишет значение в конец буфера, 
			// передвигает указатель конечной позиции на следующую ячейку
			// Возвращает false, если буфер полон
			bool addOneValue( double value );

			// Возвращает true, если буфер полон
			bool isFull();

			// Возвращает true, если буфер пуст
			bool isEmpty();
};
// ------------------------------------------------------------------

// Класс передатчика
public ref class TTransmitterThread {

		// Мьютекс для приостановки потока
		// Поток постоянно его захватывает и тут же освобождает.
		// Если из управляющего потока мьютекс захватить, то поток встанет на попытке его перехватить 
		// и пойдет дальше, когда управляющий поток освободит мьютекс
		Mutex ^rPauseMutex, 
			
		// Мьютекс, обеспечивающий безопасность работы с количеством значений для отправки
			^rQuantityMutex;
		
		int iInterval,	// Интервал отправки, передается из формы при нажатии на ней кнопки "Старт". 
			iQuantity;	// Количество значений, которое может принять приемник. 
						// Поток передатчика его заполняет, 
						// чтобы поток таймера формы мог его прочитать и отобразить на ней.

		// Файл для вывода "передаваемых" значений
		IO::StreamWriter ^outFile;

		// Объект потока, создается при вызове метода start и сразу запускается
		System::Threading::Thread ^threadTransmitter;

		// Ссылка на буфер
		TTransmittingBuffer ^refBuffer;

	public:
		// Конструктору передается ссылка на буфер, созданный ранее
		TTransmitterThread( TTransmittingBuffer ^buffer ); 
		~TTransmitterThread(); 

		// Метод для чтения количества значений, которое может принять приемник
		// Испольуется в потоке таймера формы.
		int getQuantity();

		// Запуск потока, передается интервал отправки
		void start( int interval );

		// Приостановка потока
		void pause();

		// Возобновление потока после паузы
		void resume();

		// Останов потока (объект потока удаляется, файл вывода закрывается)
		void stop();

		// Код потока
		void threadCode();
};
// ------------------------------------------------------------------

// Класс генератора значений
public ref class TGeneratorThread {

		// Мьютекс для приостановки потока
		// Поток постоянно его захватывает и тут же освобождает.
		// Если из управляющего потока мьютекс захватить, то поток встанет на попытке его перехватить 
		// и пойдет дальше, когда управляющий поток освободит мьютекс
		Mutex ^rPauseMutex;

		// Дискретизация, передается из формы при нажатии на ней кнопки "Старт". 
		int iDiscreet;

		// Объект потока, создается при вызове метода start и сразу запускается
		System::Threading::Thread ^threadGenerator;

		// Ссылка на буфер
		TTransmittingBuffer ^refBuffer;

	public:
		// Конструктору передается ссылка на буфер, созданный ранее
		TGeneratorThread( TTransmittingBuffer ^buffer ); 
		~TGeneratorThread();

		// Запуск потока, передается дискретизация
		void start( int discreet );

		// Приостановка потока
		void pause();

		// Возобновление потока после паузы
		void resume();

		// Останов потока (объект потока удаляется, файл вывода закрывается)
		void stop();

		// Код потока
		void threadCode();
};
// ------------------------------------------------------------------
// }